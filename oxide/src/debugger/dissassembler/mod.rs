
pub fn disassemble(bytes: &[u8]) -> String {
    match bytes.get(0).unwrap_or(&0) {
        0x0 => format!("NOP"),
        0x1 => format!("LD BC, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0x2 => format!("LD (BC), A"),
        0x3 => format!("INC BC"),
        0x4 => format!("INC B"),
        0x5 => format!("DEC B"),
        0x6 => format!("LD B, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0x7 => format!("RLCA"),
        0x8 => format!("LD ({:#06X}), SP", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0x9 => format!("ADD HL, BC"),
        0xA => format!("LD A, (BC)"),
        0xB => format!("DEC BC"),
        0xC => format!("INC C"),
        0xD => format!("DEC C"),
        0xE => format!("LD C, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xF => format!("RRCA"),
        0x10 => format!("STOP 0"),
        0x11 => format!("LD DE, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0x12 => format!("LD (DE), A"),
        0x13 => format!("INC DE"),
        0x14 => format!("INC D"),
        0x15 => format!("DEC D"),
        0x16 => format!("LD D, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0x17 => format!("RLA"),
        0x18 => format!("JR r8"),
        0x19 => format!("ADD HL, DE"),
        0x1A => format!("LD A, (DE)"),
        0x1B => format!("DEC DE"),
        0x1C => format!("INC E"),
        0x1D => format!("DEC E"),
        0x1E => format!("LD E, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0x1F => format!("RRA"),
        0x20 => format!("JR NZ, r8"),
        0x21 => format!("LD HL, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0x22 => format!("LD (HL+), A"),
        0x23 => format!("INC HL"),
        0x24 => format!("INC H"),
        0x25 => format!("DEC H"),
        0x26 => format!("LD H, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0x27 => format!("DAA"),
        0x28 => format!("JR Z, r8"),
        0x29 => format!("ADD HL, HL"),
        0x2A => format!("LD A, (HL+)"),
        0x2B => format!("DEC HL"),
        0x2C => format!("INC L"),
        0x2D => format!("DEC L"),
        0x2E => format!("LD L, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0x2F => format!("CPL"),
        0x30 => format!("JR NC, r8"),
        0x31 => format!("LD SP, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0x32 => format!("LD (HL-), A"),
        0x33 => format!("INC SP"),
        0x34 => format!("INC (HL)"),
        0x35 => format!("DEC (HL)"),
        0x36 => format!("LD (HL), {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0x37 => format!("SCF"),
        0x38 => format!("JR C, r8"),
        0x39 => format!("ADD HL, SP"),
        0x3A => format!("LD A, (HL-)"),
        0x3B => format!("DEC SP"),
        0x3C => format!("INC A"),
        0x3D => format!("DEC A"),
        0x3E => format!("LD A, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0x3F => format!("CCF"),
        0x40 => format!("LD B, B"),
        0x41 => format!("LD B, C"),
        0x42 => format!("LD B, D"),
        0x43 => format!("LD B, E"),
        0x44 => format!("LD B, H"),
        0x45 => format!("LD B, L"),
        0x46 => format!("LD B, (HL)"),
        0x47 => format!("LD B, A"),
        0x48 => format!("LD C, B"),
        0x49 => format!("LD C, C"),
        0x4A => format!("LD C, D"),
        0x4B => format!("LD C, E"),
        0x4C => format!("LD C, H"),
        0x4D => format!("LD C, L"),
        0x4E => format!("LD C, (HL)"),
        0x4F => format!("LD C, A"),
        0x50 => format!("LD D, B"),
        0x51 => format!("LD D, C"),
        0x52 => format!("LD D, D"),
        0x53 => format!("LD D, E"),
        0x54 => format!("LD D, H"),
        0x55 => format!("LD D, L"),
        0x56 => format!("LD D, (HL)"),
        0x57 => format!("LD D, A"),
        0x58 => format!("LD E, B"),
        0x59 => format!("LD E, C"),
        0x5A => format!("LD E, D"),
        0x5B => format!("LD E, E"),
        0x5C => format!("LD E, H"),
        0x5D => format!("LD E, L"),
        0x5E => format!("LD E, (HL)"),
        0x5F => format!("LD E, A"),
        0x60 => format!("LD H, B"),
        0x61 => format!("LD H, C"),
        0x62 => format!("LD H, D"),
        0x63 => format!("LD H, E"),
        0x64 => format!("LD H, H"),
        0x65 => format!("LD H, L"),
        0x66 => format!("LD H, (HL)"),
        0x67 => format!("LD H, A"),
        0x68 => format!("LD L, B"),
        0x69 => format!("LD L, C"),
        0x6A => format!("LD L, D"),
        0x6B => format!("LD L, E"),
        0x6C => format!("LD L, H"),
        0x6D => format!("LD L, L"),
        0x6E => format!("LD L, (HL)"),
        0x6F => format!("LD L, A"),
        0x70 => format!("LD (HL), B"),
        0x71 => format!("LD (HL), C"),
        0x72 => format!("LD (HL), D"),
        0x73 => format!("LD (HL), E"),
        0x74 => format!("LD (HL), H"),
        0x75 => format!("LD (HL), L"),
        0x76 => format!("HALT"),
        0x77 => format!("LD (HL), A"),
        0x78 => format!("LD A, B"),
        0x79 => format!("LD A, C"),
        0x7A => format!("LD A, D"),
        0x7B => format!("LD A, E"),
        0x7C => format!("LD A, H"),
        0x7D => format!("LD A, L"),
        0x7E => format!("LD A, (HL)"),
        0x7F => format!("LD A, A"),
        0x80 => format!("ADD A, B"),
        0x81 => format!("ADD A, C"),
        0x82 => format!("ADD A, D"),
        0x83 => format!("ADD A, E"),
        0x84 => format!("ADD A, H"),
        0x85 => format!("ADD A, L"),
        0x86 => format!("ADD A, (HL)"),
        0x87 => format!("ADD A, A"),
        0x88 => format!("ADC A, B"),
        0x89 => format!("ADC A, C"),
        0x8A => format!("ADC A, D"),
        0x8B => format!("ADC A, E"),
        0x8C => format!("ADC A, H"),
        0x8D => format!("ADC A, L"),
        0x8E => format!("ADC A, (HL)"),
        0x8F => format!("ADC A, A"),
        0x90 => format!("SUB B"),
        0x91 => format!("SUB C"),
        0x92 => format!("SUB D"),
        0x93 => format!("SUB E"),
        0x94 => format!("SUB H"),
        0x95 => format!("SUB L"),
        0x96 => format!("SUB (HL)"),
        0x97 => format!("SUB A"),
        0x98 => format!("SBC A, B"),
        0x99 => format!("SBC A, C"),
        0x9A => format!("SBC A, D"),
        0x9B => format!("SBC A, E"),
        0x9C => format!("SBC A, H"),
        0x9D => format!("SBC A, L"),
        0x9E => format!("SBC A, (HL)"),
        0x9F => format!("SBC A, A"),
        0xA0 => format!("AND B"),
        0xA1 => format!("AND C"),
        0xA2 => format!("AND D"),
        0xA3 => format!("AND E"),
        0xA4 => format!("AND H"),
        0xA5 => format!("AND L"),
        0xA6 => format!("AND (HL)"),
        0xA7 => format!("AND A"),
        0xA8 => format!("XOR B"),
        0xA9 => format!("XOR C"),
        0xAA => format!("XOR D"),
        0xAB => format!("XOR E"),
        0xAC => format!("XOR H"),
        0xAD => format!("XOR L"),
        0xAE => format!("XOR (HL)"),
        0xAF => format!("XOR A"),
        0xB0 => format!("OR B"),
        0xB1 => format!("OR C"),
        0xB2 => format!("OR D"),
        0xB3 => format!("OR E"),
        0xB4 => format!("OR H"),
        0xB5 => format!("OR L"),
        0xB6 => format!("OR (HL)"),
        0xB7 => format!("OR A"),
        0xB8 => format!("CP B"),
        0xB9 => format!("CP C"),
        0xBA => format!("CP D"),
        0xBB => format!("CP E"),
        0xBC => format!("CP H"),
        0xBD => format!("CP L"),
        0xBE => format!("CP (HL)"),
        0xBF => format!("CP A"),
        0xC0 => format!("RET NZ"),
        0xC1 => format!("POP BC"),
        0xC2 => format!("JP NZ, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xC3 => format!("JP {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xC4 => format!("CALL NZ, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xC5 => format!("PUSH BC"),
        0xC6 => format!("ADD A, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xC7 => format!("RST 00H"),
        0xC8 => format!("RET Z"),
        0xC9 => format!("RET"),
        0xCA => format!("JP Z, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xCB => format!("PREFIX CB"),
        0xCC => format!("CALL Z, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xCD => format!("CALL {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xCE => format!("ADC A, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xCF => format!("RST 08H"),
        0xD0 => format!("RET NC"),
        0xD1 => format!("POP DE"),
        0xD2 => format!("JP NC, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xD4 => format!("CALL NC, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xD5 => format!("PUSH DE"),
        0xD6 => format!("SUB {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xD7 => format!("RST 10H"),
        0xD8 => format!("RET C"),
        0xD9 => format!("RETI"),
        0xDA => format!("JP C, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xDC => format!("CALL C, {:#06X}", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xDE => format!("SBC A, {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xDF => format!("RST 18H"),
        0xE0 => format!("LDH (0xFF{:02X}), A", bytes.get(1).copied().unwrap_or(0)),
        0xE1 => format!("POP HL"),
        0xE2 => format!("LD (C), A"),
        0xE5 => format!("PUSH HL"),
        0xE6 => format!("AND {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xE7 => format!("RST 20H"),
        0xE8 => format!("ADD SP, r8"),
        0xE9 => format!("JP (HL)"),
        0xEA => format!("LD ({:#06X}), A", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xEE => format!("XOR {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xEF => format!("RST 28H"),
        0xF0 => format!("LDH A, (0xFF{:02X})", bytes.get(1).copied().unwrap_or(0)),
        0xF1 => format!("POP AF"),
        0xF2 => format!("LD A, (C)"),
        0xF3 => format!("DI"),
        0xF5 => format!("PUSH AF"),
        0xF6 => format!("OR {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xF7 => format!("RST 30H"),
        0xF8 => format!("LD HL, (SP + {:#04X})", bytes.get(1).copied().unwrap_or(0)),
        0xF9 => format!("LD SP, HL"),
        0xFA => format!("LD A, ({:#06X})", ((bytes.get(2).copied().unwrap_or(0) as u16) << 8 | bytes.get(1).copied().unwrap_or(0) as u16)),
        0xFB => format!("EI"),
        0xFE => format!("CP {:#04X}", bytes.get(1).copied().unwrap_or(0)),
        0xFF => format!("RST 38H"),
        _ => format!("ERR"),
    }
}

fn disassemble_prefixed(bytes: &[u8]) -> String {
    match bytes.get(0).unwrap_or(&0) {
        0x0 => format!("RLC B"),
        0x1 => format!("RLC C"),
        0x2 => format!("RLC D"),
        0x3 => format!("RLC E"),
        0x4 => format!("RLC H"),
        0x5 => format!("RLC L"),
        0x6 => format!("RLC (HL)"),
        0x7 => format!("RLC A"),
        0x8 => format!("RRC B"),
        0x9 => format!("RRC C"),
        0xA => format!("RRC D"),
        0xB => format!("RRC E"),
        0xC => format!("RRC H"),
        0xD => format!("RRC L"),
        0xE => format!("RRC (HL)"),
        0xF => format!("RRC A"),
        0x10 => format!("RL B"),
        0x11 => format!("RL C"),
        0x12 => format!("RL D"),
        0x13 => format!("RL E"),
        0x14 => format!("RL H"),
        0x15 => format!("RL L"),
        0x16 => format!("RL (HL)"),
        0x17 => format!("RL A"),
        0x18 => format!("RR B"),
        0x19 => format!("RR C"),
        0x1A => format!("RR D"),
        0x1B => format!("RR E"),
        0x1C => format!("RR H"),
        0x1D => format!("RR L"),
        0x1E => format!("RR (HL)"),
        0x1F => format!("RR A"),
        0x20 => format!("SLA B"),
        0x21 => format!("SLA C"),
        0x22 => format!("SLA D"),
        0x23 => format!("SLA E"),
        0x24 => format!("SLA H"),
        0x25 => format!("SLA L"),
        0x26 => format!("SLA (HL)"),
        0x27 => format!("SLA A"),
        0x28 => format!("SRA B"),
        0x29 => format!("SRA C"),
        0x2A => format!("SRA D"),
        0x2B => format!("SRA E"),
        0x2C => format!("SRA H"),
        0x2D => format!("SRA L"),
        0x2E => format!("SRA (HL)"),
        0x2F => format!("SRA A"),
        0x30 => format!("SWAP B"),
        0x31 => format!("SWAP C"),
        0x32 => format!("SWAP D"),
        0x33 => format!("SWAP E"),
        0x34 => format!("SWAP H"),
        0x35 => format!("SWAP L"),
        0x36 => format!("SWAP (HL)"),
        0x37 => format!("SWAP A"),
        0x38 => format!("SRL B"),
        0x39 => format!("SRL C"),
        0x3A => format!("SRL D"),
        0x3B => format!("SRL E"),
        0x3C => format!("SRL H"),
        0x3D => format!("SRL L"),
        0x3E => format!("SRL (HL)"),
        0x3F => format!("SRL A"),
        0x40 => format!("BIT 0, B"),
        0x41 => format!("BIT 0, C"),
        0x42 => format!("BIT 0, D"),
        0x43 => format!("BIT 0, E"),
        0x44 => format!("BIT 0, H"),
        0x45 => format!("BIT 0, L"),
        0x46 => format!("BIT 0, (HL)"),
        0x47 => format!("BIT 0, A"),
        0x48 => format!("BIT 1, B"),
        0x49 => format!("BIT 1, C"),
        0x4A => format!("BIT 1, D"),
        0x4B => format!("BIT 1, E"),
        0x4C => format!("BIT 1, H"),
        0x4D => format!("BIT 1, L"),
        0x4E => format!("BIT 1, (HL)"),
        0x4F => format!("BIT 1, A"),
        0x50 => format!("BIT 2, B"),
        0x51 => format!("BIT 2, C"),
        0x52 => format!("BIT 2, D"),
        0x53 => format!("BIT 2, E"),
        0x54 => format!("BIT 2, H"),
        0x55 => format!("BIT 2, L"),
        0x56 => format!("BIT 2, (HL)"),
        0x57 => format!("BIT 2, A"),
        0x58 => format!("BIT 3, B"),
        0x59 => format!("BIT 3, C"),
        0x5A => format!("BIT 3, D"),
        0x5B => format!("BIT 3, E"),
        0x5C => format!("BIT 3, H"),
        0x5D => format!("BIT 3, L"),
        0x5E => format!("BIT 3, (HL)"),
        0x5F => format!("BIT 3, A"),
        0x60 => format!("BIT 4, B"),
        0x61 => format!("BIT 4, C"),
        0x62 => format!("BIT 4, D"),
        0x63 => format!("BIT 4, E"),
        0x64 => format!("BIT 4, H"),
        0x65 => format!("BIT 4, L"),
        0x66 => format!("BIT 4, (HL)"),
        0x67 => format!("BIT 4, A"),
        0x68 => format!("BIT 5, B"),
        0x69 => format!("BIT 5, C"),
        0x6A => format!("BIT 5, D"),
        0x6B => format!("BIT 5, E"),
        0x6C => format!("BIT 5, H"),
        0x6D => format!("BIT 5, L"),
        0x6E => format!("BIT 5, (HL)"),
        0x6F => format!("BIT 5, A"),
        0x70 => format!("BIT 6, B"),
        0x71 => format!("BIT 6, C"),
        0x72 => format!("BIT 6, D"),
        0x73 => format!("BIT 6, E"),
        0x74 => format!("BIT 6, H"),
        0x75 => format!("BIT 6, L"),
        0x76 => format!("BIT 6, (HL)"),
        0x77 => format!("BIT 6, A"),
        0x78 => format!("BIT 7, B"),
        0x79 => format!("BIT 7, C"),
        0x7A => format!("BIT 7, D"),
        0x7B => format!("BIT 7, E"),
        0x7C => format!("BIT 7, H"),
        0x7D => format!("BIT 7, L"),
        0x7E => format!("BIT 7, (HL)"),
        0x7F => format!("BIT 7, A"),
        0x80 => format!("RES 0, B"),
        0x81 => format!("RES 0, C"),
        0x82 => format!("RES 0, D"),
        0x83 => format!("RES 0, E"),
        0x84 => format!("RES 0, H"),
        0x85 => format!("RES 0, L"),
        0x86 => format!("RES 0, (HL)"),
        0x87 => format!("RES 0, A"),
        0x88 => format!("RES 1, B"),
        0x89 => format!("RES 1, C"),
        0x8A => format!("RES 1, D"),
        0x8B => format!("RES 1, E"),
        0x8C => format!("RES 1, H"),
        0x8D => format!("RES 1, L"),
        0x8E => format!("RES 1, (HL)"),
        0x8F => format!("RES 1, A"),
        0x90 => format!("RES 2, B"),
        0x91 => format!("RES 2, C"),
        0x92 => format!("RES 2, D"),
        0x93 => format!("RES 2, E"),
        0x94 => format!("RES 2, H"),
        0x95 => format!("RES 2, L"),
        0x96 => format!("RES 2, (HL)"),
        0x97 => format!("RES 2, A"),
        0x98 => format!("RES 3, B"),
        0x99 => format!("RES 3, C"),
        0x9A => format!("RES 3, D"),
        0x9B => format!("RES 3, E"),
        0x9C => format!("RES 3, H"),
        0x9D => format!("RES 3, L"),
        0x9E => format!("RES 3, (HL)"),
        0x9F => format!("RES 3, A"),
        0xA0 => format!("RES 4, B"),
        0xA1 => format!("RES 4, C"),
        0xA2 => format!("RES 4, D"),
        0xA3 => format!("RES 4, E"),
        0xA4 => format!("RES 4, H"),
        0xA5 => format!("RES 4, L"),
        0xA6 => format!("RES 4, (HL)"),
        0xA7 => format!("RES 4, A"),
        0xA8 => format!("RES 5, B"),
        0xA9 => format!("RES 5, C"),
        0xAA => format!("RES 5, D"),
        0xAB => format!("RES 5, E"),
        0xAC => format!("RES 5, H"),
        0xAD => format!("RES 5, L"),
        0xAE => format!("RES 5, (HL)"),
        0xAF => format!("RES 5, A"),
        0xB0 => format!("RES 6, B"),
        0xB1 => format!("RES 6, C"),
        0xB2 => format!("RES 6, D"),
        0xB3 => format!("RES 6, E"),
        0xB4 => format!("RES 6, H"),
        0xB5 => format!("RES 6, L"),
        0xB6 => format!("RES 6, (HL)"),
        0xB7 => format!("RES 6, A"),
        0xB8 => format!("RES 7, B"),
        0xB9 => format!("RES 7, C"),
        0xBA => format!("RES 7, D"),
        0xBB => format!("RES 7, E"),
        0xBC => format!("RES 7, H"),
        0xBD => format!("RES 7, L"),
        0xBE => format!("RES 7, (HL)"),
        0xBF => format!("RES 7, A"),
        0xC0 => format!("SET 0, B"),
        0xC1 => format!("SET 0, C"),
        0xC2 => format!("SET 0, D"),
        0xC3 => format!("SET 0, E"),
        0xC4 => format!("SET 0, H"),
        0xC5 => format!("SET 0, L"),
        0xC6 => format!("SET 0, (HL)"),
        0xC7 => format!("SET 0, A"),
        0xC8 => format!("SET 1, B"),
        0xC9 => format!("SET 1, C"),
        0xCA => format!("SET 1, D"),
        0xCB => format!("SET 1, E"),
        0xCC => format!("SET 1, H"),
        0xCD => format!("SET 1, L"),
        0xCE => format!("SET 1, (HL)"),
        0xCF => format!("SET 1, A"),
        0xD0 => format!("SET 2, B"),
        0xD1 => format!("SET 2, C"),
        0xD2 => format!("SET 2, D"),
        0xD3 => format!("SET 2, E"),
        0xD4 => format!("SET 2, H"),
        0xD5 => format!("SET 2, L"),
        0xD6 => format!("SET 2, (HL)"),
        0xD7 => format!("SET 2, A"),
        0xD8 => format!("SET 3, B"),
        0xD9 => format!("SET 3, C"),
        0xDA => format!("SET 3, D"),
        0xDB => format!("SET 3, E"),
        0xDC => format!("SET 3, H"),
        0xDD => format!("SET 3, L"),
        0xDE => format!("SET 3, (HL)"),
        0xDF => format!("SET 3, A"),
        0xE0 => format!("SET 4, B"),
        0xE1 => format!("SET 4, C"),
        0xE2 => format!("SET 4, D"),
        0xE3 => format!("SET 4, E"),
        0xE4 => format!("SET 4, H"),
        0xE5 => format!("SET 4, L"),
        0xE6 => format!("SET 4, (HL)"),
        0xE7 => format!("SET 4, A"),
        0xE8 => format!("SET 5, B"),
        0xE9 => format!("SET 5, C"),
        0xEA => format!("SET 5, D"),
        0xEB => format!("SET 5, E"),
        0xEC => format!("SET 5, H"),
        0xED => format!("SET 5, L"),
        0xEE => format!("SET 5, (HL)"),
        0xEF => format!("SET 5, A"),
        0xF0 => format!("SET 6, B"),
        0xF1 => format!("SET 6, C"),
        0xF2 => format!("SET 6, D"),
        0xF3 => format!("SET 6, E"),
        0xF4 => format!("SET 6, H"),
        0xF5 => format!("SET 6, L"),
        0xF6 => format!("SET 6, (HL)"),
        0xF7 => format!("SET 6, A"),
        0xF8 => format!("SET 7, B"),
        0xF9 => format!("SET 7, C"),
        0xFA => format!("SET 7, D"),
        0xFB => format!("SET 7, E"),
        0xFC => format!("SET 7, H"),
        0xFD => format!("SET 7, L"),
        0xFE => format!("SET 7, (HL)"),
        0xFF => format!("SET 7, A"),
    }
}

pub fn get_instruction_length(opcode: u8) -> u8 {
    match opcode {
        0x0 => 1,
        0x1 => 3,
        0x2 => 1,
        0x3 => 1,
        0x4 => 1,
        0x5 => 1,
        0x6 => 2,
        0x7 => 1,
        0x8 => 3,
        0x9 => 1,
        0xA => 1,
        0xB => 1,
        0xC => 1,
        0xD => 1,
        0xE => 2,
        0xF => 1,
        0x10 => 1,
        0x11 => 3,
        0x12 => 1,
        0x13 => 1,
        0x14 => 1,
        0x15 => 1,
        0x16 => 2,
        0x17 => 1,
        0x18 => 2,
        0x19 => 1,
        0x1A => 1,
        0x1B => 1,
        0x1C => 1,
        0x1D => 1,
        0x1E => 2,
        0x1F => 1,
        0x20 => 2,
        0x21 => 3,
        0x22 => 1,
        0x23 => 1,
        0x24 => 1,
        0x25 => 1,
        0x26 => 2,
        0x27 => 1,
        0x28 => 2,
        0x29 => 1,
        0x2A => 1,
        0x2B => 1,
        0x2C => 1,
        0x2D => 1,
        0x2E => 2,
        0x2F => 1,
        0x30 => 2,
        0x31 => 3,
        0x32 => 1,
        0x33 => 1,
        0x34 => 1,
        0x35 => 1,
        0x36 => 2,
        0x37 => 1,
        0x38 => 2,
        0x39 => 1,
        0x3A => 1,
        0x3B => 1,
        0x3C => 1,
        0x3D => 1,
        0x3E => 2,
        0x3F => 1,
        0x40 => 1,
        0x41 => 1,
        0x42 => 1,
        0x43 => 1,
        0x44 => 1,
        0x45 => 1,
        0x46 => 1,
        0x47 => 1,
        0x48 => 1,
        0x49 => 1,
        0x4A => 1,
        0x4B => 1,
        0x4C => 1,
        0x4D => 1,
        0x4E => 1,
        0x4F => 1,
        0x50 => 1,
        0x51 => 1,
        0x52 => 1,
        0x53 => 1,
        0x54 => 1,
        0x55 => 1,
        0x56 => 1,
        0x57 => 1,
        0x58 => 1,
        0x59 => 1,
        0x5A => 1,
        0x5B => 1,
        0x5C => 1,
        0x5D => 1,
        0x5E => 1,
        0x5F => 1,
        0x60 => 1,
        0x61 => 1,
        0x62 => 1,
        0x63 => 1,
        0x64 => 1,
        0x65 => 1,
        0x66 => 1,
        0x67 => 1,
        0x68 => 1,
        0x69 => 1,
        0x6A => 1,
        0x6B => 1,
        0x6C => 1,
        0x6D => 1,
        0x6E => 1,
        0x6F => 1,
        0x70 => 1,
        0x71 => 1,
        0x72 => 1,
        0x73 => 1,
        0x74 => 1,
        0x75 => 1,
        0x76 => 1,
        0x77 => 1,
        0x78 => 1,
        0x79 => 1,
        0x7A => 1,
        0x7B => 1,
        0x7C => 1,
        0x7D => 1,
        0x7E => 1,
        0x7F => 1,
        0x80 => 1,
        0x81 => 1,
        0x82 => 1,
        0x83 => 1,
        0x84 => 1,
        0x85 => 1,
        0x86 => 1,
        0x87 => 1,
        0x88 => 1,
        0x89 => 1,
        0x8A => 1,
        0x8B => 1,
        0x8C => 1,
        0x8D => 1,
        0x8E => 1,
        0x8F => 1,
        0x90 => 1,
        0x91 => 1,
        0x92 => 1,
        0x93 => 1,
        0x94 => 1,
        0x95 => 1,
        0x96 => 1,
        0x97 => 1,
        0x98 => 1,
        0x99 => 1,
        0x9A => 1,
        0x9B => 1,
        0x9C => 1,
        0x9D => 1,
        0x9E => 1,
        0x9F => 1,
        0xA0 => 1,
        0xA1 => 1,
        0xA2 => 1,
        0xA3 => 1,
        0xA4 => 1,
        0xA5 => 1,
        0xA6 => 1,
        0xA7 => 1,
        0xA8 => 1,
        0xA9 => 1,
        0xAA => 1,
        0xAB => 1,
        0xAC => 1,
        0xAD => 1,
        0xAE => 1,
        0xAF => 1,
        0xB0 => 1,
        0xB1 => 1,
        0xB2 => 1,
        0xB3 => 1,
        0xB4 => 1,
        0xB5 => 1,
        0xB6 => 1,
        0xB7 => 1,
        0xB8 => 1,
        0xB9 => 1,
        0xBA => 1,
        0xBB => 1,
        0xBC => 1,
        0xBD => 1,
        0xBE => 1,
        0xBF => 1,
        0xC0 => 1,
        0xC1 => 1,
        0xC2 => 3,
        0xC3 => 3,
        0xC4 => 3,
        0xC5 => 1,
        0xC6 => 2,
        0xC7 => 1,
        0xC8 => 1,
        0xC9 => 1,
        0xCA => 3,
        0xCB => 2,
        0xCC => 3,
        0xCD => 3,
        0xCE => 2,
        0xCF => 1,
        0xD0 => 1,
        0xD1 => 1,
        0xD2 => 3,
        0xD4 => 3,
        0xD5 => 1,
        0xD6 => 2,
        0xD7 => 1,
        0xD8 => 1,
        0xD9 => 1,
        0xDA => 3,
        0xDC => 3,
        0xDE => 2,
        0xDF => 1,
        0xE0 => 2,
        0xE1 => 1,
        0xE2 => 1,
        0xE5 => 1,
        0xE6 => 2,
        0xE7 => 1,
        0xE8 => 2,
        0xE9 => 1,
        0xEA => 3,
        0xEE => 2,
        0xEF => 1,
        0xF0 => 2,
        0xF1 => 1,
        0xF2 => 1,
        0xF3 => 1,
        0xF5 => 1,
        0xF6 => 2,
        0xF7 => 1,
        0xF8 => 2,
        0xF9 => 1,
        0xFA => 3,
        0xFB => 1,
        0xFE => 2,
        0xFF => 1,
        _ => 1,
    }
}
